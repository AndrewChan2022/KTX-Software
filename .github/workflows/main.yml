# Copyright 2015-2020 The Khronos Group Inc.
# SPDX-License-Identifier: Apache-2.0
name: KTX-Software CI

on:
  # Trigger the workflow on pull request,
  # but only for the main branch
  pull_request:
  # Also trigger on release created events
  release:
    types:
      - created
  # Allow manual trigger
  workflow_dispatch:

jobs:
  windows-arm64:
    runs-on: windows-latest
    strategy:
      matrix:
        options: [
          {config: Debug, package: NO, tools: OFF, docs: OFF},
          {config: Release, package: YES, tools: ON, docs: ON}
        ]
    env:
      # Skip downloading necessities for the load tests and source and golden
      # images for the other tests since we can't test them on arm64 anyway.
      GIT_LFS_SKIP_SMUDGE: 1

      BUILD_DIR: "build/build-batch-vs2022"
      CONFIGURATION: "${{matrix.options.config}}"
      CMAKE_GEN: "Visual Studio 17 2022" # Only VS version on Windows Server 2022
      CMAKE_TOOLSET: "ClangCL"

      PACKAGE: ${{matrix.options.package}}
      FEATURE_TOOLS: ${{matrix.options.tools}}
      FEATURE_DOC: ${{matrix.options.docs}}

      PLATFORM: "arm64"
      SUPPORT_SSE: OFF

      # No tests on arm64 since the host is x64 and can't run the built tests
      FEATURE_JNI: OFF # Not sure of the state of JNI on arm64 windows
      FEATURE_TESTS: OFF
      FEATURE_LOADTESTS: OFF

    steps:
    - uses: actions/checkout@v2
      with:
        # Fetch all history to make sure tags are
        # included (used for version creation)
        fetch-depth: 0

    # Need doxygen if docs are supposed to be built
    # This has been observed to fail due to Sourceforge host failure
    # Can't control that so please manually re-run if we time out here
    - name: Install Doxygen
      if: matrix.options.docs == 'ON'
      uses: crazy-max/ghaction-chocolatey@v2
      with:
        args: install doxygen.install

    - name: Setup Secure File
      if: matrix.options.package == 'YES'
      run: iex ((New-Object Net.WebClient).DownloadString('https://raw.githubusercontent.com/appveyor/secure-file/master/install.ps1'))

    - name: Install Signing Certificate
      if: matrix.options.package == 'YES'
      run: |
        if ($env:CERT_PK_PASS) {
          $cert_file = "the_khronos_group_inc.p12"
          appveyor-tools\secure-file -decrypt "${cert_file}.enc" -secret $env:CERT_DC_SECRET -salt $env:CERT_DC_SALT
          certutil -p $env:CERT_PK_PASS -importpfx My $cert_file NoExport
          rm $cert_file
          $env:WIN_CODE_SIGN_IDENTITY = 'The Khronos Group Inc'
          $env:WIN_CS_CERT_SEARCH_MACHINE_STORE = 'ON'
        } else {
          $env:WINDOWS_CODE_SIGN_IDENTITY = ''
        }

    - name: Build arm64 Windows
      run: powershell ./ci_scripts/build_win.ps1

    - name: Get KTX version
      if: matrix.options.package == 'YES'
      id: ktx-version
      run: |
        $env:KTX_VERSION = Get-Content $env:BUILD_DIR/ktx.version
        echo "::set-output name=ktx-version::$env:KTX_VERSION"

    - name: Upload Artifact
      if: matrix.options.package == 'YES'
      uses: actions/upload-artifact@v2
      with:
        name: KTX-Software-${{ steps.ktx-version.outputs.ktx-version }}-Windows-ARM64
        path: ${{env.BUILD_DIR}}/KTX-Software-${{ steps.ktx-version.outputs.ktx-version }}-Windows-ARM64.exe

  mingw:
    runs-on: windows-latest

    steps:
    - uses: actions/checkout@v2
      with:
        # Fetch all history to make sure tags are
        # included (used for version creation)
        fetch-depth: 0
    - uses: seanmiddleditch/gha-setup-ninja@v3
    - uses: Honeybunch/setup-mingw@v3
    - name: Configure Mingw x64
      run: cmake -B build -G "Ninja Multi-Config" -DCMAKE_C_COMPILER=gcc -DCMAKE_CXX_COMPILER=g++
    - name: Build Mingw x64 Debug
      run: cmake --build build --config Debug
    - name: Build Mingw x64 RelWithDebInfo
      run: cmake --build build --config RelWithDebInfo
    - name: Build Mingw x64 Release
      run: cmake --build build --config Release

  linux:

    runs-on: ubuntu-latest

    steps:
    - uses: actions/checkout@v2
      with:
        # Fetch all history to make sure tags are
        # included (used for version creation)
        fetch-depth: 0
    - uses: seanmiddleditch/gha-setup-ninja@v3

    - uses: nttld/setup-ndk@v1
      id: setup-ndk
      with:
        ndk-version: r21e
        add-to-path: false

    - name: android_Debug
      run: ./ci_scripts/build_android_debug.sh
      env:
        ANDROID_ABI: arm64-v8a
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        ASTC_ISA: "ISA_NEON=ON"

    - name: android_arm64-v8a
      run: ./ci_scripts/build_android.sh
      env:
        ANDROID_ABI: arm64-v8a
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}
        ASTC_ISA: "ISA_NEON=ON"

    - name: android_armeabi-v7a
      run: ./ci_scripts/build_android.sh
      env:
        ANDROID_ABI: armeabi-v7a
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}

    # Android ABI x86 is obsolete
    # and not supported by ARM ASTC encoder

    # - name: android_x86
    #   run: ./ci_scripts/build_android.sh
    #   env:
    #     ANDROID_ABI: x86
    #     ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: android_x86_64
      run: ./ci_scripts/build_android.sh
      env:
        ANDROID_ABI: x86_64
        ANDROID_NDK: ${{ steps.setup-ndk.outputs.ndk-path }}

    - name: get-version
      id: ktx-version
      run: |
        KTX_VERSION=$(cat build-android-arm64-v8a/ktx.version)
        echo "::set-output name=ktx-version::$KTX_VERSION"

    # Android artifact
    - name: upload artifact
      uses: actions/upload-artifact@v2
      with:
        name: KTX-Software-${{ steps.ktx-version.outputs.ktx-version }}-Android
        path: install-android
